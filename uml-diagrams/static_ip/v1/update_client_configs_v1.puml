@startuml

title Update Client configs API Flow\nPrimary use would be to approve static IP

actor "User" as user
box "client service"
participant "ClientConfigController" as ccc
participant "ClientConfigService" as ccs
participant "ClientConfigMapper" as ccm
participant "ClientConfig\nRepository" as ccr
participant "DenyListNotifierHelper" as dlnh
participant "StaticIpAllowList\nProcessor" as siap
participant "ClientConfig\nVersionRepository" as cvr
end box
participant "Shadow \nDevice" as sd
database "RDS \nclient_config" as table
database "RDS \nclient_configurations\n_versions" as table2

group Create client configs
	user -> ccc ++: PUT /api/v1/client-configs
	note left: {"macsList":\n[{\n"macAddress":"01:00:5E:7F:FF:FA",\n"description":"test1",\n"clientWiredMode":"wireless",\n "state":"AUTH_DENIED",\n "staticIp":true,\n "ipAddress": null\n},{\n"macAddress":"01:00:5E:7F:FF:FB",\n"description":"test2",\n"clientWiredMode":"wireless",\n "state":"AUTH_DENIED",\n "staticIp":true,\n "ipAddress": null\n}]\n}
	ccc -> ccs ++: updateClientConfig(tenantId, clientConfigRequestDTO)
	loop #White clientConfigRequestDTO.getMacsList().size()
    ccs -> ccm ++: getUniqueRowIdentifier(tenantId, dto.getMacAddress()))
    ccm -> ccs --: requestedEntriesPKey
  end
  ccs -> ccr ++ : findAllById(requestedEntriesPKeys)
  ccr --> table ++: query
  table --> ccr --: result
  ccr -> ccs -- : List<ClientEntity>
  ccs -> ccs : from List<ClientEntity>\nto Map<PKey, ClientEntity>:existingEntries
  loop #White clientConfigRequestDTOS.getMacsList().size() times
    ccs -> ccm ++: getUniqueRowIdentifier(tenantId, macAddress)
    ccm -> ccs --: PKey
    ccs -> ccs : clientEntity=existingEntries.get(PKey)
    alt clientEntity==null
      ccs -> ccs : Update flag\n a)staticIpAllowListChange, b)notifyDenyListChange
      ccs -> ccm ++: mapClientConfigMacToClientEntity(clientConfigMac)
      ccm -> ccs --: ClientEntity
    else
      ccs -> ccs : Update flag\n a)staticIpAllowListChange, b)notifyDenyListChange
      ccs -> ccs : clientEntity.setAction(clientConfigMac.getState())\nclientEntity.setStaticIp(clientConfigMac.isStaticIp())\nclientEntity.setIpAddress(clientConfigMac.getIpAddress())
    end
    ccs -> ccs : existingEntries.put(clientEntity.getId(), clientEntity)
  end
  ccs -> ccr ++: saveAll(clientEntities)
  ccr --> table ++: save
  table --> ccr --: entries saved
  ccr -> ccs --
  alt staticIpAllowListChange
    ccs -> ccs: publishEvent(ActionEvent(STATIC_APPROVE_LIST_CHANGE, tenantId))
  end
  alt notifyDenyListChange
    ccs -> ccs: publishEvent(new ActionEvent(DENY_LIST_CHANGE, tenantId))
  end
  ccs -> ccc --:
  ccc -> user --: ResponseEntity<Void>
end

group onApplicationEvent
 alt actionEvent.getName().equals("STATIC_APPROVE_LIST_CHANGE")
    alt #LightBlue no exception
      ccs--> siap : processStaticIpAllowListChange(actionEvent.getTenantId())
    else #Orange exception
      siap -> siap : Repeat max 3 times\nprocessStaticIpAllowListChange(actionEvent.getTenantId())
    end
 else if actionEvent.getName().equals("DENY_LIST_CHANGE")
    ccs --> dlnh : notifyDenyListChange(actionEvent.getTenantId());
 end
end

group #Yellow processStaticIpAllowListChange
  siap -> cvr ++: findByTenantId(tenantId)
  cvr --> table2 ++: query
  table2 --> cvr --: result
  cvr -> siap --: Optional<ClientConfigVersion>
  siap -> sd ++: shadowRepository.listVersions(filterQuery)
  note left: {\n"tenantId":tenantId,\n"name":"static_approve_list"\n}
   sd -> siap --: ElementStateResponse
   siap -> siap : getLatestVersion\n ElementStateVersionDTO
   siap -> siap : getIncremented version
   siap -> cvr ++: updateNewVersion
   cvr --> table2 ++: update
   table2 --> cvr --: updated entry
   cvr -> siap --:
   siap -> sd ++: updateNewVersion
   sd -> siap --:
end

group #Yellow notifyDenyListChange
  dlnh -> cvr ++: findByTenantId(tenantId)
  cvr --> table2 ++: query
  table2 --> cvr --: result
  cvr -> dlnh --: Optional<ClientConfigVersion>
  dlnh -> sd ++: shadowRepository.listVersions(filterQuery)
  note left: {\n"tenantId":tenantId,\n"name":"deny_list"\n}
   sd -> dlnh --: ElementStateResponse
   dlnh -> dlnh : getLatestVersion\n ElementStateVersionDTO
   dlnh -> dlnh : getIncremented version
   dlnh -> cvr ++: updateNewVersion
   cvr --> table2 ++: update
   table2 --> cvr --: updated entry
   cvr -> dlnh --:
   dlnh -> sd ++: updateNewVersion
   sd -> dlnh --:
end

@enduml